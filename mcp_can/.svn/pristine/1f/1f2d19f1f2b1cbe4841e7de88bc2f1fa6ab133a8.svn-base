/*
  mcp_can.h
  2015 Copyright (c) DFROBOT Technology Inc.  All right reserved.

  Author:Jansion	
  Contributor:
  2015-5-25
  
*/
#ifndef _MCP_H_
#define _MCP_H_

#include "mcp_can_dfs.h"

#define MAX_MESSAGE_LENGTH 8

class MCPCAN
{
    private:
    
    INT8U   can_ExtFlg;                                                  /* identifier xxxID             */
                                                                        /* either extended (the 29 LSB) */
                                                                        /* or standard (the 11 LSB)     */
    INT32U  can_ID;                                                      /* can id                       */
    INT8U   can_Dlc;                                                     /* data length:                 */
    INT8U   can_Dta[MAX_MESSAGE_LENGTH];                            	/* data                         */
    INT8U   can_Rtr;                                                     /* rtr                          */
    INT8U   can_filhit;
    INT8U   SPI_CS;

private:

    void mcp_reset(void);                                           /* reset mcp                */

    INT8U mcp_readRegister(const INT8U RegAddr);                    /* read mcp's register      */
    
    void mcp_readMulitiRegisters(const INT8U RegAddr, 
	                       INT8U *buf, 
                                INT8U len);
    void mcp_setRegister(const INT8U RegAddr,                       /* set mcp's register       */
                             const INT8U value);

    void mcp_setRegisterS(const INT8U RegAddr,                      /* set mcp's registers      */
                              const INT8U *buf,
                              const INT8U len);
    
    void mcp_initBuffers(void);
    
    void mcp_modifyRegister(const INT8U RegAddr,                    /* set bit of one register      */
                                const INT8U mask,
                                const INT8U data);

    INT8U mcp_readStatus(void);                                     /* read mcp's Status        */
    INT8U mcp_setMode(const INT8U newMode);                 /* set mode                     */
    INT8U mcp_configRate(const INT8U canSpeed);                     /* set boadrate                 */
    INT8U mcp_init(const INT8U canSpeed);                           /* mcpinit                  */

    void mcp_writeid( const INT8U mcp_addr,                        /* write can id                 */
                               const INT8U ext,
                               const INT32U id );

    void mcp_readid( const INT8U mcp_addr,                         /* read can id                  */
                                    INT8U* ext,
                                    INT32U* id );

    void mcp_writecanMsg( const INT8U sidh_addr );          /* write can msg                */
    void mcp_readcanMsg( const INT8U sidh_addr);            /* read can msg                 */
    void mcp_starttransmit(const INT8U mcp_addr);                  /* start transmit               */
    INT8U mcp_getNextFreeTXBuf(INT8U *txbuf_n);                     /* get Next free txbuf          */

/*
*  can operator function
*/    

    INT8U setMsg(INT32U id, INT8U ext, INT8U len, INT8U rtr, INT8U *pData); /* set message                  */  
    INT8U setMsg(INT32U id, INT8U ext, INT8U len, INT8U *pData);            /* set message                  */  
    INT8U clearMsg();                                               /* clear all message to zero    */
    INT8U readMsg();                                                /* read message                 */
    INT8U sendMsg();                                                /* send message                 */

public:
    MCPCAN(INT8U _CS);
	
    INT8U begin(INT8U speedset);    
	INT8U sendMsgBuf(INT32U id, INT8U ext, INT8U len, INT8U *buf);   /* send buf                     *//* init can                     */
    INT8U isRemoteRequest(void);                                    /* get RR flag when receive     */

	INT8U init_Mask(INT8U num, INT8U ext, INT32U Data);           /* init Masks                   */
    INT8U checkReceive(void);                                       /* if something received        */

	
	INT8U init_Filter(Filter_t Filter_num, INT8U ext, INT32U Data);

	INT8U sendMsgBuf(INT32U id, INT8U ext, INT8U rtr, INT8U len, INT8U *buf);   /* send buf                     */
  
    INT8U readMsgBuf(INT8U *len, INT8U *buf);                       /* read buf                     */
    INT8U readMsgBufID(INT32U *ID, INT8U *len, INT8U *buf);         /* read buf with object ID      */
    INT8U checkError(void);                                         /* if something error           */
    INT32U getCanId(void);                                          /* get can id when receive      */
    INT8U isExtendedFrame(void);                                    /* did we recieve 29bit frame?  */
};

#endif
